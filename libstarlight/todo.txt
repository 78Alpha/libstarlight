


roadmap to first release, in no particular order {
    finish implementing OSK! {
        - fix cursor-down
        polish! {
            - background
            actual cursor image?
        }
        InputManager::OpenKeyboard
    }
    fix [ offset (-1 it)
    
    add generic backdrop assets (and form)
    
    add license!! (MIT?)
    ADD README.MD PLS
} then consider these before 1.0 "gold" {
    - should form priority be a float?
    make closing forms a bit less finicky (add them to a separate list and let the Application remove them from the list)
    add customization for Button (alternate idle/press images, optional glyph drawable)
    ^ use that to spice up the OSK
    input prompt dialog
    language config and atlas support
    maybe implement some way of "knocking out" and replacing metrics during runtime for theme switching
    fix font glyph padding to eliminate slight "crosstalk" in bordered variants
}

today's agenda {
    ...
} then {
    change Label to move the rect instead of resizing to accomodate drops (add an offset thing to Font)
    kill scroll velocity when hitting the edge (or rapid decel)
    make scrollfield autofit a flag
    make le scrollfield check threshold itself and only count directions it can actually scroll
    visual sugar such as "bump glow" for scrollfields
}

unordered_roadmap {
    moar UI elements {
        checkbox
        radio box
        tabs?
        auto-layout/list boxes
        combo box
        slider
        progress bar
        
    }
    maybe switch drawoffset system from a stack to a pass-in
    moar utility stuff in basic types
    make textbox scrollable when text is larger than container
    tween system
    ...
    use ctrulib sync features for WorkerThread instead of spinlocks at some point
    - http://smealum.github.io/ctrulib/synchronization_8h.html#a9fe83ca3ec3c6ae269203acf367ad5a9
    duck l'orange
    
    ... tweenable drawable format?
    figure out the whole font y offset deal
}

configurator for ui elements? maybe crtp after all
noap, macro/include shenanigans
new Button().at(40, 40).within(container).ofSize(64, 32).withText("Popsicles!");
shelved for now because shared_from_this is kind of dumb for what I need it for :D :D :D
(though maybe some trickery with putting the last-created-element in a static, combined with static factory pattern...)

maybe LoosePtr (wraps weak_ptr for expired check but references by raw pointer)
implement this to replace weak_ptr parent if it ends up impacting performance too much

maybe implement this: https://probablydance.com/2013/01/13/a-faster-implementation-of-stdfunction/

// notes {
    bitmap font converter - https://github.com/playcanvas/fonts/blob/master/fnt_to_json.py
    pretty print - jsonprettyprint.com
}
